{"version":3,"sources":["RandomCats.js","FilteredCats.js","CatForm.js","App.js","serviceWorker.js","index.js"],"names":["CatFrame","styled","div","Img","img","RandomCats","props","useState","cats","setCats","initialValue","value","setValue","fetchInProgress","setFetchInProgress","useEffect","fetch","then","response","json","result","url","src","alt","onClick","type","Ol","ol","FilteredCats","filterCategory","filterAmount","map","cat","key","id","CatForm","category","setCategory","catAmount","setCatAmount","submitCategory","setSubmitCategory","submitCatAmount","setSubmitCatAmount","className","onSubmit","event","preventDefault","onChange","target","App","exact","activeClassName","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.610a5635.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CatFrame = styled.div`\r\n  max-width: 400px;\r\n  max-height: 100%;\r\n  margin: auto;\r\n`\r\n\r\nconst Img = styled.img`\r\n  height: 100%;\r\n  width: 100%;\r\n  object-fit: contain;\r\n`\r\n\r\nfunction RandomCats(props) {\r\n  const [cats, setCats] = useState(null)\r\n  const [value, setValue] = useState(props.initialValue)\r\n  const [fetchInProgress, setFetchInProgress] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setFetchInProgress(true)\r\n    fetch('https://api.thecatapi.com/v1/images/search')\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setCats(result[0].url)\r\n        setFetchInProgress(false)\r\n      })\r\n  }, [value])\r\n  return (\r\n    <div>\r\n      {fetchInProgress ? (\r\n        <p>Laddar...</p>\r\n      ) : (\r\n        <div>\r\n          <CatFrame>\r\n            <Img src={cats} alt=\"Förmodligen en katt\" /> <br />\r\n          </CatFrame>\r\n          <div>\r\n            <input\r\n              onClick={() => {\r\n                setValue(value + 1)\r\n              }}\r\n              type=\"button\"\r\n              value=\"Slumpa katt\"\r\n            />\r\n          </div>\r\n          <p>\r\n            Du har tittat på {value} kattbild{value > 1 && <span>er</span>}.\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RandomCats\r\n","import React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst CatFrame = styled.div`\r\n  max-width: 400px;\r\n  max-height: 100%;\r\n  margin: auto;\r\n`\r\n\r\nconst Img = styled.img`\r\n  height: 100%;\r\n  width: 100%;\r\n  object-fit: contain;\r\n`\r\n\r\nconst Ol = styled.ol`\r\n  list-style-type: none;\r\n  padding: 0;\r\n`\r\n\r\nfunction FilteredCats(props) {\r\n  const [cats, setCats] = useState([])\r\n  const [fetchInProgress, setFetchInProgress] = useState(false)\r\n\r\n  useEffect(() => {\r\n    setFetchInProgress(true)\r\n    fetch(\r\n      `https://api.thecatapi.com/v1/images/search?category_ids=${props.filterCategory}&limit=${props.filterAmount}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        setCats(result)\r\n        setFetchInProgress(false)\r\n      })\r\n  }, [props.filterAmount, props.filterCategory])\r\n\r\n  return (\r\n    <div>\r\n      {fetchInProgress ? (\r\n        <p>Laddar...</p>\r\n      ) : (\r\n        <Ol>\r\n          {cats.map((cat) => (\r\n            <li key={cat.id}>\r\n              <br />\r\n              <CatFrame>\r\n                <Img src={cat.url} alt=\"Förmodligen en katt\" />\r\n              </CatFrame>\r\n            </li>\r\n          ))}\r\n        </Ol>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FilteredCats\r\n","import React, { useState } from 'react'\r\nimport FilteredCats from './FilteredCats.js'\r\nimport './CatForm.css'\r\n\r\nfunction CatForm() {\r\n  const [category, setCategory] = useState('5')\r\n  const [catAmount, setCatAmount] = useState('1')\r\n  const [submitCategory, setSubmitCategory] = useState(null)\r\n  const [submitCatAmount, setSubmitCatAmount] = useState(null)\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault()\r\n    setSubmitCategory(category)\r\n    setSubmitCatAmount(catAmount)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"filter-form\" onSubmit={handleSubmit}>\r\n        <label className=\"filter-option\">\r\n          Kattegori:{' '}\r\n          <select\r\n            onChange={(event) => setCategory(event.target.value)}\r\n            value={category}\r\n          >\r\n            <option value={5}>Katt i låda</option>\r\n            <option value={15}>Katt i kläder</option>\r\n            <option value={1}>Katt i hatt</option>\r\n            <option value={14}>Katt i handfat</option>\r\n            <option value={2}>Katt i rymden</option>\r\n            <option value={7}>Katt i slips</option>\r\n          </select>\r\n        </label>\r\n\r\n        <label>\r\n          Antal bilder:{' '}\r\n          <select\r\n            onChange={(event) => setCatAmount(event.target.value)}\r\n            value={catAmount}\r\n          >\r\n            <option>1</option>\r\n            <option>2</option>\r\n            <option>3</option>\r\n          </select>\r\n        </label>\r\n        <input className=\"submit-button\" type=\"submit\" value=\"Kör!\" />\r\n      </form>\r\n      <FilteredCats\r\n        filterCategory={submitCategory}\r\n        filterAmount={submitCatAmount}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CatForm\r\n","import React from 'react'\nimport {\n  NavLink,\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport './App.css'\nimport RandomCats from './RandomCats'\nimport CatForm from './CatForm'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Katthörnan</h1>\n      <Router>\n        <nav>\n          <ul className=\"nav\">\n            <li className=\"nav-option\">\n              <NavLink\n                exact={true}\n                className=\"link\"\n                activeClassName=\"link-active\"\n                to=\"/cats\"\n              >\n                Slumpa\n              </NavLink>\n            </li>\n            <li className=\"nav-option\">\n              <NavLink\n                className=\"link\"\n                activeClassName=\"link-active\"\n                to=\"/cats/filter\"\n              >\n                Filtrera\n              </NavLink>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route exact path=\"/cats\">\n            <RandomCats initialValue={1} />\n          </Route>\n          <Route path=\"/cats/filter\">\n            <CatForm />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}